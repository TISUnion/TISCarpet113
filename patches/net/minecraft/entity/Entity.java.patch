--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -1,5 +1,7 @@
 package net.minecraft.entity;
 
+import carpet.helpers.BlockRotator;
+import carpet.settings.CarpetSettings;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
@@ -59,6 +61,7 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.Tag;
+import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EnumActionResult;
 import net.minecraft.util.EnumBlockRenderType;
@@ -94,6 +97,7 @@
 import net.minecraft.world.gen.Heightmap;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import ocd.mcoptimizations.shapecast.IShapecaster;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -151,6 +155,8 @@
     protected Random rand;
     public int ticksExisted;
     private int fire;
+    //[CM] public for entity info
+    public int getFire() { return fire;}
     protected boolean inWater;
     protected double submergedHeight;
     protected boolean eyesInWater;
@@ -570,6 +576,12 @@
 
     public void move(MoverType type, double x, double y, double z)
     {
+        if (CarpetSettings.optimizeVoxelCode)
+        {
+            move_new(type, x, y, z);
+            return;
+        }
+        
         if (this.noClip)
         {
             this.setBoundingBox(this.getBoundingBox().offset(x, y, z));
@@ -979,7 +991,422 @@
             this.world.profiler.endSection();
         }
     }
-
+    
+    public void move_new(MoverType type, double x, double y, double z)
+    {
+        if (this.noClip)
+        {
+            this.setBoundingBox(this.getBoundingBox().offset(x, y, z));
+            this.resetPositionToBB();
+        }
+        else
+        {
+            if (type == MoverType.PISTON)
+            {
+                long i = this.world.getGameTime();
+                
+                if (i != this.pistonDeltasGameTime)
+                {
+                    Arrays.fill(this.pistonDeltas, 0.0D);
+                    this.pistonDeltasGameTime = i;
+                }
+                
+                if (x != 0.0D)
+                {
+                    int j = EnumFacing.Axis.X.ordinal();
+                    double d0 = MathHelper.clamp(x + this.pistonDeltas[j], -0.51D, 0.51D);
+                    x = d0 - this.pistonDeltas[j];
+                    this.pistonDeltas[j] = d0;
+                    
+                    if (Math.abs(x) <= (double)1.0E-5F)
+                    {
+                        return;
+                    }
+                }
+                else if (y != 0.0D)
+                {
+                    int l = EnumFacing.Axis.Y.ordinal();
+                    double d19 = MathHelper.clamp(y + this.pistonDeltas[l], -0.51D, 0.51D);
+                    y = d19 - this.pistonDeltas[l];
+                    this.pistonDeltas[l] = d19;
+                    
+                    if (Math.abs(y) <= (double)1.0E-5F)
+                    {
+                        return;
+                    }
+                }
+                else
+                {
+                    if (z == 0.0D)
+                    {
+                        return;
+                    }
+                    
+                    int i1 = EnumFacing.Axis.Z.ordinal();
+                    double d20 = MathHelper.clamp(z + this.pistonDeltas[i1], -0.51D, 0.51D);
+                    z = d20 - this.pistonDeltas[i1];
+                    this.pistonDeltas[i1] = d20;
+                    
+                    if (Math.abs(z) <= (double)1.0E-5F)
+                    {
+                        return;
+                    }
+                }
+            }
+            
+            this.world.profiler.startSection("move");
+            double d17 = this.posX;
+            double d18 = this.posY;
+            double d1 = this.posZ;
+            
+            if (this.isInWeb)
+            {
+                this.isInWeb = false;
+                x *= 0.25D;
+                y *= (double)0.05F;
+                z *= 0.25D;
+                this.motionX = 0.0D;
+                this.motionY = 0.0D;
+                this.motionZ = 0.0D;
+            }
+            
+            double d2 = x;
+            double d3 = y;
+            double d4 = z;
+            
+            if ((type == MoverType.SELF || type == MoverType.PLAYER) && this.onGround && this.isSneaking() && this instanceof EntityPlayer)
+            {
+                for (double d5 = 0.05D; x != 0.0D && this.world.isCollisionBoxesEmpty(this, this.getBoundingBox().offset(x, (double)(-this.stepHeight), 0.0D)); d2 = x)
+                {
+                    if (x < 0.05D && x >= -0.05D)
+                    {
+                        x = 0.0D;
+                    }
+                    else if (x > 0.0D)
+                    {
+                        x -= 0.05D;
+                    }
+                    else
+                    {
+                        x += 0.05D;
+                    }
+                }
+                
+                for (; z != 0.0D && this.world.isCollisionBoxesEmpty(this, this.getBoundingBox().offset(0.0D, (double)(-this.stepHeight), z)); d4 = z)
+                {
+                    if (z < 0.05D && z >= -0.05D)
+                    {
+                        z = 0.0D;
+                    }
+                    else if (z > 0.0D)
+                    {
+                        z -= 0.05D;
+                    }
+                    else
+                    {
+                        z += 0.05D;
+                    }
+                }
+                
+                for (; x != 0.0D && z != 0.0D && this.world.isCollisionBoxesEmpty(this, this.getBoundingBox().offset(x, (double)(-this.stepHeight), z)); d4 = z)
+                {
+                    if (x < 0.05D && x >= -0.05D)
+                    {
+                        x = 0.0D;
+                    }
+                    else if (x > 0.0D)
+                    {
+                        x -= 0.05D;
+                    }
+                    else
+                    {
+                        x += 0.05D;
+                    }
+                    
+                    d2 = x;
+                    
+                    if (z < 0.05D && z >= -0.05D)
+                    {
+                        z = 0.0D;
+                    }
+                    else if (z > 0.0D)
+                    {
+                        z -= 0.05D;
+                    }
+                    else
+                    {
+                        z += 0.05D;
+                    }
+                }
+            }
+            
+            AxisAlignedBB axisalignedbb4 = this.getBoundingBox();
+            
+            if (x != 0.0D || y != 0.0D || z != 0.0D)
+            {
+                final ocd.mcoptimizations.shapecast.IShapecaster shapecaster = this.world.createShapecaster(this, this.getBoundingBox(), x, y, z);
+                
+                if (y != 0.0D)
+                {
+                    y = shapecaster.shapecast(this.getBoundingBox(), EnumFacing.Axis.Y, y);
+                    if (y != 0.0D)
+                        this.setBoundingBox(this.getBoundingBox().offset(0.0D, y, 0.0D));
+                }
+                
+                if (x != 0.0D)
+                {
+                    x = shapecaster.shapecast(this.getBoundingBox(), EnumFacing.Axis.X, x);
+                    
+                    if (x != 0.0D)
+                    {
+                        this.setBoundingBox(this.getBoundingBox().offset(x, 0.0D, 0.0D));
+                    }
+                }
+                
+                if (z != 0.0D)
+                {
+                    z = shapecaster.shapecast(this.getBoundingBox(), EnumFacing.Axis.Z, z);
+                    
+                    if (z != 0.0D)
+                    {
+                        this.setBoundingBox(this.getBoundingBox().offset(0.0D, 0.0D, z));
+                    }
+                }
+            }
+            
+            boolean flag = this.onGround || d3 != y && d3 < 0.0D;
+            
+            if (this.stepHeight > 0.0F && flag && (d2 != x || d4 != z))
+            {
+                double d6 = x;
+                double d7 = y;
+                double d8 = z;
+                AxisAlignedBB axisalignedbb = this.getBoundingBox();
+                this.setBoundingBox(axisalignedbb4);
+                x = d2;
+                y = (double)this.stepHeight;
+                z = d4;
+                
+                if (d2 != 0.0D || y != 0.0D || d4 != 0.0D)
+                {
+                    final IShapecaster shapecaster = this.world.createShapecaster(this, this.getBoundingBox().expand(d2, y, d4));
+                    
+                    AxisAlignedBB axisalignedbb1 = this.getBoundingBox();
+                    AxisAlignedBB axisalignedbb2 = axisalignedbb1.expand(d2, 0.0D, d4);
+                    double d9 = shapecaster.shapecast(axisalignedbb2, EnumFacing.Axis.Y, y);
+                    
+                    if (d9 != 0.0D)
+                    {
+                        axisalignedbb1 = axisalignedbb1.offset(0.0D, d9, 0.0D);
+                    }
+                    
+                    double d10 = shapecaster.shapecast(axisalignedbb1, EnumFacing.Axis.X, d2);
+                    
+                    if (d10 != 0.0D)
+                    {
+                        axisalignedbb1 = axisalignedbb1.offset(d10, 0.0D, 0.0D);
+                    }
+                    
+                    double d11 = shapecaster.shapecast(axisalignedbb1, EnumFacing.Axis.Z, d4);
+                    
+                    if (d11 != 0.0D)
+                    {
+                        axisalignedbb1 = axisalignedbb1.offset(0.0D, 0.0D, d11);
+                    }
+                    
+                    AxisAlignedBB axisalignedbb3 = this.getBoundingBox();
+                    double d12 = shapecaster.shapecast(axisalignedbb3, EnumFacing.Axis.Y, y);
+                    
+                    if (d12 != 0.0D)
+                    {
+                        axisalignedbb3 = axisalignedbb3.offset(0.0D, d12, 0.0D);
+                    }
+                    
+                    double d13 = shapecaster.shapecast(axisalignedbb3, EnumFacing.Axis.X, d2);
+                    
+                    if (d13 != 0.0D)
+                    {
+                        axisalignedbb3 = axisalignedbb3.offset(d13, 0.0D, 0.0D);
+                    }
+                    
+                    double d14 = shapecaster.shapecast(axisalignedbb3, EnumFacing.Axis.Z, d4);
+                    
+                    if (d14 != 0.0D)
+                    {
+                        axisalignedbb3 = axisalignedbb3.offset(0.0D, 0.0D, d14);
+                    }
+                    
+                    double d15 = d10 * d10 + d11 * d11;
+                    double d16 = d13 * d13 + d14 * d14;
+                    
+                    if (d15 > d16)
+                    {
+                        x = d10;
+                        z = d11;
+                        y = -d9;
+                        this.setBoundingBox(axisalignedbb1);
+                    }
+                    else
+                    {
+                        x = d13;
+                        z = d14;
+                        y = -d12;
+                        this.setBoundingBox(axisalignedbb3);
+                    }
+                    
+                    y = shapecaster.shapecast(this.getBoundingBox(), EnumFacing.Axis.Y, y);
+                    
+                    if (y != 0.0D)
+                    {
+                        this.setBoundingBox(this.getBoundingBox().offset(0.0D, y, 0.0D));
+                    }
+                }
+                
+                if (d6 * d6 + d8 * d8 >= x * x + z * z)
+                {
+                    x = d6;
+                    y = d7;
+                    z = d8;
+                    this.setBoundingBox(axisalignedbb);
+                }
+            }
+            
+            this.world.profiler.endSection();
+            this.world.profiler.startSection("rest");
+            this.resetPositionToBB();
+            this.collidedHorizontally = d2 != x || d4 != z;
+            this.collidedVertically = d3 != y;
+            this.onGround = this.collidedVertically && d3 < 0.0D;
+            this.collided = this.collidedHorizontally || this.collidedVertically;
+            int j1 = MathHelper.floor(this.posX);
+            int k = MathHelper.floor(this.posY - (double)0.2F);
+            int k1 = MathHelper.floor(this.posZ);
+            BlockPos blockpos = new BlockPos(j1, k, k1);
+            IBlockState iblockstate = this.world.getBlockState(blockpos);
+            
+            if (iblockstate.isAir())
+            {
+                BlockPos blockpos1 = blockpos.down();
+                IBlockState iblockstate1 = this.world.getBlockState(blockpos1);
+                Block block1 = iblockstate1.getBlock();
+                
+                if (block1 instanceof BlockFence || block1 instanceof BlockWall || block1 instanceof BlockFenceGate)
+                {
+                    iblockstate = iblockstate1;
+                    blockpos = blockpos1;
+                }
+            }
+            
+            this.updateFallState(y, this.onGround, iblockstate, blockpos);
+            
+            if (d2 != x)
+            {
+                this.motionX = 0.0D;
+            }
+            
+            if (d4 != z)
+            {
+                this.motionZ = 0.0D;
+            }
+            
+            Block block = iblockstate.getBlock();
+            
+            if (d3 != y)
+            {
+                block.onLanded(this.world, this);
+            }
+            
+            if (this.canTriggerWalking() && (!this.onGround || !this.isSneaking() || !(this instanceof EntityPlayer)) && !this.isPassenger())
+            {
+                double d21 = this.posX - d17;
+                double d22 = this.posY - d18;
+                double d23 = this.posZ - d1;
+                
+                if (block != Blocks.LADDER)
+                {
+                    d22 = 0.0D;
+                }
+                
+                if (block != null && this.onGround)
+                {
+                    block.onEntityWalk(this.world, blockpos, this);
+                }
+                
+                this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt(d21 * d21 + d23 * d23) * 0.6D);
+                this.distanceWalkedOnStepModified = (float)((double)this.distanceWalkedOnStepModified + (double)MathHelper.sqrt(d21 * d21 + d22 * d22 + d23 * d23) * 0.6D);
+                
+                if (this.distanceWalkedOnStepModified > this.nextStepDistance && !iblockstate.isAir())
+                {
+                    this.nextStepDistance = this.determineNextStepDistance();
+                    
+                    if (this.isInWater())
+                    {
+                        Entity entity = this.isBeingRidden() && this.getControllingPassenger() != null ? this.getControllingPassenger() : this;
+                        float f = entity == this ? 0.35F : 0.4F;
+                        float f1 = MathHelper.sqrt(entity.motionX * entity.motionX * (double)0.2F + entity.motionY * entity.motionY + entity.motionZ * entity.motionZ * (double)0.2F) * f;
+                        
+                        if (f1 > 1.0F)
+                        {
+                            f1 = 1.0F;
+                        }
+                        
+                        this.playSwimSound(f1);
+                    }
+                    else
+                    {
+                        this.playStepSound(blockpos, iblockstate);
+                    }
+                }
+                else if (this.distanceWalkedOnStepModified > this.nextFlap && this.makeFlySound() && iblockstate.isAir())
+                {
+                    this.nextFlap = this.playFlySound(this.distanceWalkedOnStepModified);
+                }
+            }
+            
+            try
+            {
+                this.doBlockCollisions();
+            }
+            catch (Throwable throwable)
+            {
+                CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Checking entity block collision");
+                CrashReportCategory crashreportcategory = crashreport.makeCategory("Entity being checked for collision");
+                this.fillCrashReport(crashreportcategory);
+                throw new ReportedException(crashreport);
+            }
+            
+            boolean flag1 = this.isInWaterRainOrBubbleColumn();
+            
+            if (this.world.isFlammableWithin(this.getBoundingBox().shrink(0.001D)))
+            {
+                if (!flag1)
+                {
+                    ++this.fire;
+                    
+                    if (this.fire == 0)
+                    {
+                        this.setFire(8);
+                    }
+                }
+                
+                this.dealFireDamage(1);
+            }
+            else if (this.fire <= 0)
+            {
+                this.fire = -this.getFireImmuneTicks();
+            }
+            
+            if (flag1 && this.isBurning())
+            {
+                this.playSound(SoundEvents.ENTITY_GENERIC_EXTINGUISH_FIRE, 0.7F, 1.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+                this.fire = -this.getFireImmuneTicks();
+            }
+            
+            this.world.profiler.endSection();
+        }
+    }
+    
+    
     protected float determineNextStepDistance()
     {
         return (float)((int)this.distanceWalkedOnStepModified + 1);
@@ -1566,6 +1993,13 @@
         return partialTicks == 1.0F ? this.rotationYaw : this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * partialTicks;
     }
 
+    // [CM] start useMainYaw fix for placementRotationFix
+    public float getMainYaw(float partialTicks)
+    {
+        return partialTicks == 1.0F ? this.rotationYaw : this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * partialTicks;
+    }
+    // [CM] end
+
     protected final Vec3d getVectorForRotation(float pitch, float yaw)
     {
         float f = pitch * ((float)Math.PI / 180F);
@@ -1762,22 +2196,27 @@
             this.motionX = nbttaglist2.getDouble(0);
             this.motionY = nbttaglist2.getDouble(1);
             this.motionZ = nbttaglist2.getDouble(2);
-
-            if (Math.abs(this.motionX) > 10.0D)
+    
+            // [CM] Entity momentum loss - if statement around
+            if (CarpetSettings.entityMomentumLoss)
             {
-                this.motionX = 0.0D;
+                if (Math.abs(this.motionX) > 10.0D)
+                {
+                    this.motionX = 0.0D;
+                }
+    
+                if (Math.abs(this.motionY) > 10.0D)
+                {
+                    this.motionY = 0.0D;
+                }
+    
+                if (Math.abs(this.motionZ) > 10.0D)
+                {
+                    this.motionZ = 0.0D;
+                }
             }
+            // [CM] End
 
-            if (Math.abs(this.motionY) > 10.0D)
-            {
-                this.motionY = 0.0D;
-            }
-
-            if (Math.abs(this.motionZ) > 10.0D)
-            {
-                this.motionZ = 0.0D;
-            }
-
             this.posX = nbttaglist.getDouble(0);
             this.posY = nbttaglist.getDouble(1);
             this.posZ = nbttaglist.getDouble(2);
@@ -2821,6 +3260,10 @@
 
     public EnumFacing getHorizontalFacing()
     {
+        //CM
+        if (BlockRotator.flippinEligibility(this))
+            return EnumFacing.fromAngle((double)this.rotationYaw).getOpposite();
+
         return EnumFacing.fromAngle((double)this.rotationYaw);
     }
 
